package org.rosi.modules.engine;

import org.rosi.modules.ModuleContext ;

import java.util.Map;
import java.util.Set;
import java.util.HashMap ;

public class SimpleJavaEngine implements BasicEnginable {

/* ------------------------------------------------------------------ 
 ____  _                   _                  
/ ___|| |_ _ __ _   _  ___| |_ _   _ _ __ ___ 
\___ \| __| '__| | | |/ __| __| | | | '__/ _ \
 ___) | |_| |  | |_| | (__| |_| |_| | | |  __/
|____/ \__|_|   \__,_|\___|\__|\__,_|_|  \___|

*/
    class MotionDetector {

        String cover = "closed" ;
        int brightness = 0 ;
        String battery = "low" ;

        @DeviceAnnotation("trigger")
        String motionCount = "nothing" ;

    }
    class DoorDetector {
        String activity = "alive" ;
    
        @DeviceAnnotation("trigger")
        String trigger_cnt = "0" ; 

        @DeviceAnnotation("mono,trigger_cnt,20;trigger")
        boolean trigger_cnt_mono = false ;
    }
    class HeaterDevice {

        @DeviceAnnotation("actor")
        float temperature = (float) 0.0 ;
    }
    class Room {

        DoorDetector door = new DoorDetector();
        MotionDetector motion = new MotionDetector() ;
        HeaterDevice heater = new HeaterDevice() ;
    }
    class rooms {
        Room livingroom = new Room() ;
        Room hallway    = new Room();
    }
    rooms devices = new rooms();
/* ------------------------------------------------------------------ 
 ____                                      
|  _ \ _ __ ___   __ _ _ __ __ _ _ __ ___  
| |_) | '__/ _ \ / _` | '__/ _` | '_ ` _ \ 
|  __/| | | (_) | (_| | | | (_| | | | | | |
|_|   |_|  \___/ \__, |_|  \__,_|_| |_| |_|
                 |___/                     

*/

    public void initialize() throws Exception {

        InspectionCompanion companion = new InspectionCompanion( "devices" , devices ) ;
        /*
         * Print Devices.
         */
        Set<String> stringSet = companion.names() ;
        System.out.println("Listing devices!");
        for( String name : stringSet ){
            System.out.println(name+" -> "+companion.getByName(name) ) ;
        }
        // devices.hallway.heater.temperature = (float)23.5 ;

        Map<String,Mono> rememberMonos = new HashMap<String,Mono>();
        /*
         *  Get through Monos and Actors, remember Sensors (need to add observer last)
         */
        for( String name : stringSet ){

            InspectionCompanion.FieldDetails detail = companion.getByName(name) ;
            String anno = detail.getAnnotations();
            String [] t = anno.split(";") ;
            for( int i = 0 ; i < t.length ; i++ ){
                String v = t[i].strip() ;
                String [] td = v.split(",") ;
                if( td.length == 0 ) continue ;

                if( td[0].equals("actor" ) ){
                    _devices.put( name , new Actor( name , detail ) ) ;
                }else if( td[0].equals("mono" ) ){
                    if( ( td.length < 2 ) || ( td.length > 3 ) )
                        throw new 
                        IllegalArgumentException("mono of "+name+" expects 2 or 3 arguments, found "+td.length+"!") ;

                    Mono mono = new Mono( name , detail ) ;
                    mono.setTarget( td[1].strip() ) ;
                    if( td.length == 3 )mono.setDelay( Integer.parseInt( td[2] ) ) ;

                    _devices.put( name , mono );
                    rememberMonos.put( name , mono ) ;
                 
                }else if( td[0].equals("sensor" ) ){
                    _devices.put( name , new Sensor(name,detail) ) ;
                }     
            }
        }
        for( Mono mono : rememberMonos.values() ) {
            Device device = _devices.get( mono.target ) ;
            if( ( device == null ) || ! ( device instanceof Sensor ) )continue ;
            ((Sensor)device).setObserver(  mono ) ;

        }
    }
    public boolean setSensorValue( String key , String value ) 
        throws  IllegalArgumentException, 
                NumberFormatException  {

        return true ;
    }
    public void execute() {

    }
    public Map<String,String> getModifiedActors() {
        Map<String,String> outmap = new HashMap<String,String>();

        return outmap;
    }
/*          
 _____             _            
| ____|_ __   __ _(_)_ __   ___ 
|  _| | '_ \ / _` | | '_ \ / _ \
| |___| | | | (_| | | | | |  __/
|_____|_| |_|\__, |_|_| |_|\___|
             |___/              
         
*/
    private Map<String,Device> _devices = new HashMap<String,Device>();
    private class Device {
        InspectionCompanion.FieldDetails companion ;
        private String name ;
        private Device( String name , InspectionCompanion.FieldDetails companion ){
            this.companion = companion ;
            this.name = name ;
        }
    }
    private class Sensor extends Device {
        private Mono observer = null ;
        private Sensor( String name , InspectionCompanion.FieldDetails companion ){
            super( name , companion ) ;
        }
        private void setObserver( Mono observer ){
            this.observer = observer ;
        }
        private void setValue( String value ) throws Exception {
            this.companion.set(value);
            if( this.observer != null )this.observer.trigger() ;
        }
    }
    private class Actor extends Device {
        private Actor( String name , InspectionCompanion.FieldDetails companion ){
            super( name , companion ) ;
        }
    }
    private class Mono extends Device {
        private String target = null ;
        private long   delay = 0 ;
        private Mono( String name , InspectionCompanion.FieldDetails companion ){
            super( name , companion ) ;
        }
        private void setTarget( String target ){
            this.target = target ;
        }
        private void setDelay( long delay ){
            this.delay = delay ;
        }
        private void trigger(){
        }
    }
    public SimpleJavaEngine( ModuleContext context ){


    }

    public static void main( String [] args ) throws Exception {
        Map<String,String> contextMap = new HashMap<String,String>();
        ModuleContext context = new ModuleContext( "engine" , contextMap );
        SimpleJavaEngine engine = new SimpleJavaEngine( context ) ;
        engine.initialize();
    }
}
